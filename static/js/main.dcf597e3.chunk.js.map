{"version":3,"sources":["pages/leaderboard/styles.module.scss","components/header/styles.module.scss","components/datagrid/styles.module.scss","components/header/index.js","tensor/types/subtensor.js","utils/constants.js","tensor/subtensor.js","tensor/metagraph.js","utils/utils.js","functions/mineserver.js","components/chart/index.js","components/datagrid/index.js","configs/index.js","pages/leaderboard/index.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","className","styles","header","logo","src","alt","subtensor_custom_types","Balance","NeuronMetadataOf","version","ip","port","ip_type","uid","modality","hotkey","coldkey","active","last_update","stake","trust","rank","consensus","incentive","emission","dividends","bonds","weights","subtensor_custom_types_priority","priority","SUBSTRATE_HOST_AKATSUKI","Subtensor","network","chain_endpoint","this","getEndpoint","wsProvider","api","dismissNewBlock","dataType","getDataType","endpoint","a","WsProvider","ApiPromise","create","provider","types","rpc","chain","getHeader","blockNumber","parseInt","number","toString","block","query","subtensorModule","n","n_total","uids","Array","from","length","_","i","neurons","multi","getBlockHash","neuron","callback","subscribeNewHeads","RAOPERTAO","parseFloat","U32_MAX","U64MAX","Metagraph","subtensor","clear","ranks","tau","endpoints","get_n","then","ret","parseMetagraph","get_current_block","fill","last_updates","map","identifiers","endpoint_objs","index","toNumber","ipInt","id_str","substr","weight","_index","bond","registerNewBlockCallback","createMineServer","metagraph","MineServer","rowData","unsubscribeDatagridCallback","unsubscribeChartCallback","isDatagridUpdating","isChartUpdating","prototype","initialLoad","Observable","fromPromise","Promise","resolve","reject","console","log","process","fetch","res","json","cloneDeep","error","updateNewBlockDatagrid","that","Object","observer","setInterval","newData","updates","adds","deletes","data","some","org","push","new_item","next","add","update","delete","updateNewBlockChart","unsubscribe","backfillData","metadata","forEach","element","dividend","MinerChart","props","series","setChartRef","useState","allowChartUpdate","title","text","chart","type","renderTo","zoomType","events","load","e","target","xAxis","alignTicks","tickInterval","showLastLabel","endOnTick","labels","formatter","value","yAxis","enabled","rangeSelector","buttons","count","inputEnabled","selected","legend","layout","align","x","verticalAlign","y","floating","backgroundColor","Highcharts","theme","legendBackgroundColor","tooltip","credits","chartOptions","container","constructorType","highcharts","options","Datagrid","colOptions","onGridReady","getRowNodeId","rowBuffer","paginationPageSize","cacheOverflowSize","maxConcurrentDatasourceRequests","maxBlocksInCache","infiniteInitialRowCount","id","style","height","width","margin","gridContainer","defaultColDef","flex","minWidth","resizable","sortable","enableRangeSelection","modules","AllCommunityModules","option","columnOptions","headerName","field","cellClass","maxWidth","Leaderboard","setSubtensor","setMetagraph","gridApi","setGridApi","setGridColumnApi","chartRef","connectToTensor","_subtensor","connect","_metagraph","params","columnApi","useEffect","mockServer","initialLoad$","updateNewBlockDatagrid$","subscribe","updateMetadata","setRowData","applyTransactionAsync","s","len","points","time","Date","getTime","addPoint","xLabel","redraw","getRandomData","contents","datagrid","name","getDataSeries","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcf597e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contents\":\"styles_contents__1RGbF\",\"datagrid\":\"styles_datagrid__1xR_M\",\"chart\":\"styles_chart__29UPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__KI8xt\",\"logo\":\"styles_logo__1x4uj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ag-root-wrapper\":\"styles_ag-root-wrapper__ikBDm\",\"gridContainer\":\"styles_gridContainer__1iCcw\"};","import styles from './styles.module.scss';\n\nconst Header = ()=>{\n    return (\n        <header className={styles.header}>\n            <img className={styles.logo} src='/logo.png' alt=\"\" />\n        </header>\n    );\n}\n\nexport default Header;","/// subtensor custom types\nexport const subtensor_custom_types = {\n    Balance: \"u64\",\n    NeuronMetadataOf: {\n        version: 'u32',\n        ip: \"u128\", \n        port: \"u16\", \n        ip_type: \"u8\", \n        uid: \"u32\", \n        modality: \"u8\", \n        hotkey: \"AccountId\", \n        coldkey: \"AccountId\", \n        active: \"u32\",\n        last_update: \"u64\",\n        stake: \"u64\",\n        trust: \"u64\",\n        rank: \"u64\",\n        consensus: \"u64\",\n        incentive: \"u64\",\n        emission: \"u64\",\n        dividends: \"u64\",\n        bonds: \"Vec<(u32, u64)>\",\n        weights: \"Vec<(u32, u32)>\"\n    }\n};\n/// subtensor custom type with priority - nobunaga\nexport const subtensor_custom_types_priority = {\n    Balance: \"u64\",\n    NeuronMetadataOf: {\n        version: 'u32',\n        ip: \"u128\", \n        port: \"u16\", \n        ip_type: \"u8\", \n        uid: \"u32\", \n        modality: \"u8\", \n        hotkey: \"AccountId\", \n        coldkey: \"AccountId\", \n        active: \"u32\",\n        last_update: \"u64\",\n        priority: \"u64\",\n        stake: \"u64\",\n        trust: \"u64\",\n        rank: \"u64\",\n        consensus: \"u64\",\n        incentive: \"u64\",\n        emission: \"u64\",\n        dividends: \"u64\",\n        bonds: \"Vec<(u32, u64)>\",\n        weights: \"Vec<(u32, u32)>\"\n    }\n};","\n//SUBSTRATE ADDRESS\n//dev\nexport const SUBSTRATE_HOST_AKATSUKI = 'ws://main.akatsuki.bittensor.com:9944';\nexport const SUBSTRATE_HOST_NOBUNAGA = 'ws://staging.nobunaga.opentensor.ai:9944';\nexport const SUBSTRATE_HOST_NAKAMOTO = 'ws://entrypointnetworkloadbalancer-21fe5fbdc08425ca.elb.us-east-2.amazonaws.com:9944'; \n","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport {subtensor_custom_types, subtensor_custom_types_priority} from './types/subtensor';\nimport {SUBSTRATE_HOST_AKATSUKI, SUBSTRATE_HOST_NOBUNAGA, SUBSTRATE_HOST_NAKAMOTO} from '../utils/constants';\n\n/**\n * Handles interactions with the subtensor chain.\n * Referenced from https://github.com/opentensor/bittensor\n */\nexport default class  Subtensor {\n    /**\n     * Constructor\n     * @param {*} network - not yet confirmed\n     * @param {*} chain_endpoint - Substrate chain endpoint\n     */\n    constructor(network=\"\", chain_endpoint =\"\"){\n        this.network = network;\n        this.chain_endpoint = this.getEndpoint(chain_endpoint);\n        this.wsProvider = null;\n        this.api = null;\n        this.dismissNewBlock = null;\n        this.dataType = this.getDataType(chain_endpoint);\n    }\n    \n    /**\n     * retrieve full host endpoint from keyword\n     * @param {*} endpoint \n     * @returns \n     */\n    getEndpoint(endpoint) {\n        if (endpoint === \"\" || endpoint === \"akatsuki\" ){\n            return SUBSTRATE_HOST_AKATSUKI;\n        }\n        else if ( endpoint === \"nobunaga\" ) {\n            return SUBSTRATE_HOST_NOBUNAGA;\n        }\n        else if ( endpoint === 'nakamoto' ) {\n            return SUBSTRATE_HOST_NAKAMOTO;\n        }\n        return SUBSTRATE_HOST_AKATSUKI;\n    }\n\n    /**\n     * retrieve custom datattype from keyword\n     * @param {*} endpoint \n     * @returns \n     */\n    getDataType(endpoint) {\n        if(endpoint === \"nobunaga\") {\n            return subtensor_custom_types_priority;\n        }else if ( endpoint === 'nakamoto'){\n            return subtensor_custom_types_priority;\n        }\n        return subtensor_custom_types;\n    }\n\n\n    /**\n     * connect to  Substrates\n     */\n    async connect(){\n        this.wsProvider = new WsProvider(this.chain_endpoint);\n        this.api = await ApiPromise.create({ \n            provider: this.wsProvider,\n            types: this.dataType\n          });\n    }\n\n    /**\n     * Retrun the latest block number of the chain\n     * @returns \n     */\n    async get_current_block(){\n        const blockNumber = await this.api.rpc.chain.getHeader();\n        return parseInt(blockNumber.number.toString());\n    }\n\n    /**\n     * Returns the number of neurons on the chain at block\n     * @param block block number - currently reserved value \n     * @returns number of neurons subscribed to the chain\n     */\n    async get_n(block){\n        var n = await this.api.query.subtensorModule.n();\n        return parseInt(n.toString());\n    }\n    \n    /**\n     * Returns list of neuron from the chain\n     * @param {*} n_total total number of neurons in the chain\n     * @returns total neuron objects\n     */\n    async neurons(n_total) {\n        var uids = Array.from({length: n_total}, (_, i) => i);\n        return this.api.query.subtensorModule.neurons.multi(uids);\n    }\n    \n    /**\n     * Returns blockhash on the block number\n     * @param {*} block  - request block number\n     * @returns \n     */\n    async getBlockHash(block) {\n        return await this.api.rpc.chain.getBlockHash(block);\n    }\n\n    /**\n     * Returns latest block info\n     * @returns latest chain block\n     */\n    async getLastBlock() {\n        return await this.api.rpc.chain.getHeader();\n    }\n\n    /**\n     * Reutrns neuron object from the chain\n     * @param {*} uid the uid of the neuron to query for\n     * @returns neuron object associated with ui\n     */\n    async neurons_by_uid(uid) {\n        var neuron = await this.api.query.subtensorModule.neurons(uid);\n        return neuron;\n    }\n    \n    /**\n     * Register callback for new block update\n     * @param {*} callback callback for new block update\n     */\n    async registerNewBlockCallback(callback) {\n        return await this.api.rpc.chain.subscribeNewHeads((header) => {\n            callback(header);\n        });\n    }\n}\n","\nimport * as utils from '../utils/utils';\n\nconst RAOPERTAO = parseFloat('1000000000');\nconst U32_MAX = parseFloat('4294967295');\nconst U64MAX = parseFloat('18446744073709551615');\n/**\n * Maintains chain state \n * Referenced from https://github.com/opentensor/bittensor\n * Interface:\n    tau (:obj:`torch.FloatTensor` of shape :obj:`(1)`): \n        Current, per block, token inflation rate.\n\n    block (:obj:`torch.LongTensor` of shape :obj:`(1)`):\n        State block number.\n\n    uids (:obj:`torch.LongTensor` of shape :obj:`(metagraph.n)`):\n        UIDs for each neuron.\n    \n    stake (:obj:`torch.LongTensor` of shape :obj:`(metagraph.n)`):\n        Stake balance for each neuron ordered by uid.\n        \n    last_update (:obj:`torch.LongTensor` of shape :obj:`(metagraph.n)`):\n        Last emission call for each neuron ordered by uid.\n\n    weights (:obj:`torch.FloatTensor` of shape :obj:`(metagraph.n, metagraph.n)`):\n        Full weight matrix on chain ordered by uid.\n\n    neurons (:obj:`torch.LongTensor` of shape :obj:`(metagraph.n, -1)`) \n        Tokenized endpoint information.\n */\nexport default class Metagraph {\n    /**\n     * Initializes a new Metagraph chain interface object.\n     * @param {*} subtensor Subtensor instance as param\n     */\n    constructor(subtensor){\n        this.subtensor = subtensor;\n        this.clear();\n    }\n\n    /**\n     * Erases Metagraph state.\n     */\n    clear(){\n        this.stake = [];\n        // Rank\n        this.ranks = [];\n        // incentive\n        this.incentive = [];\n        // consensus\n        this.consensus = [];\n        // trust\n        this.trust = [];\n        // dividends\n        this.dividends = [];\n        // bonds\n        this.bonds = [];\n        // weights\n        this.weights = [];\n        // version\n        this.version = [];\n        // n\n        this.n = [];\n        // tau\n        this.tau = [];\n        // block\n        this.block = 0;\n        // trust\n        this.trust = [];\n        // inflation\n        this.emission = [];\n        // active\n        this.active = [];\n        // last_update\n        this.last_update = [];\n        // endpoints\n        this.endpoints = [];\n        this.uids = 0;\n    }\n\n    // Returns a dividend vector for a change in weights by computing the full incenvite function.\n    // Args:\n    // uid (int):\n    //    uid to set weights.\n    // row_weights: (torch.FloatTensor, shape =(n)):\n    //    normalized row to replace at uid.\n    // Returns:\n    // dividends (torch.FloatTensor):\n    //    Dividends for the entire network.\n    forward(){\n\n    }\n\n    /**\n     * Synchronizes this metagraph with the chain state.\n     * @param {*} block - block number \n     * @returns Metagraph state \n     */\n    async sync(callback, block = null){\n        var n_total = 0;\n        //var neurons = [];\n        this.block = block;\n\n        // retrieve neurons\n        if(block) {\n            // chec\n            n_total =  await this.subtensor.get_n(block);\n            this.subtensor.neurons(block).then((neurons)=>{\n                var ret = this.parseMetagraph(n_total, neurons);\n                callback(ret);\n            });\n        } else {\n            this.block = await this.subtensor.get_current_block();\n            n_total = await this.subtensor.get_n();\n            this.subtensor.neurons(n_total).then((neurons)=>{\n                var ret = this.parseMetagraph(n_total, neurons);\n                callback(ret);\n            });\n        }\n\n    }\n\n    parseMetagraph(n_total, neurons){\n        \n        // variable initialization\n        var uids = Array.from({length: n_total}, (_, i) => i);\n        var active = Array(n_total).fill(0);\n        var stake = Array(n_total).fill(0);\n        var ranks = Array(n_total).fill(0);\n        var trust = Array(n_total).fill(0);\n        var emission = Array(n_total).fill(0);\n        var incentive = Array(n_total).fill(0);\n        var dividends = Array(n_total).fill(0);\n        var last_updates = Array(n_total).fill(-1);\n        var weights = new Array(n_total).fill(0).map(() => new Array(n_total).fill(0));\n        var bonds = new Array(n_total).fill(0).map(() => new Array(n_total).fill(0));\n        var identifiers = new Array(n_total).fill('');\n        this.endpoint_objs = new Array(n_total).fill(null);\n\n        neurons.map((neuron)=>{\n            const index = neuron['uid'].toNumber();\n\n            //further should change the custom types value parsing for react use\n            //uids[index] = parseInt(neuron['uid'].toString());\n            active[index] = parseInt(neuron['active'].toString());\n            stake[index] =  parseFloat(neuron['stake'].toString()) / RAOPERTAO;\n            ranks[index] = parseFloat(neuron['rank'].toString()) / U64MAX;\n            trust[index] = parseFloat(neuron['trust'].toString()) / U64MAX;\n            incentive[index] = parseFloat(neuron['incentive']) / U64MAX;\n            \n            emission[index] = parseInt(neuron['emission'].toString()) / RAOPERTAO;\n            dividends[index] = parseFloat(neuron['dividends'].toString()) / RAOPERTAO;\n            last_updates[index] = parseInt(neuron['last_update'].toString());\n            var id_str = neuron['hotkey'].toString();\n            identifiers[index] = id_str.length > 5 ? id_str.substr(id_str.length - 5) : id_str;\n            this.endpoint_objs[index] = {\n                version: parseInt(neuron['version'].toString()),\n                //uid: parseInt(neuron['uid'].toString()),\n                hotkey: neuron['hotkey'].toString(),\n\n                ip_type: parseInt(neuron['ip_type'].toString()),\n                ip: utils.int2ip(parseInt(neuron['ip'].toString())),\n                port: parseInt(neuron['port'].toString()),\n                modality: parseInt(neuron['modality'].toString()),\n                coldkey: neuron['coldkey'].toString(),\n            };\n\n\n            if( neuron['weights'].length > 0 ){\n                weights[index] = new Array(n_total).fill(0);\n                neuron['weights'].map((weight, _index)=>(\n                    weights[index][parseInt(weight[0].toString())] = parseFloat(weight[1].toString()) / U32_MAX\n                ))\n            }else{\n                weights[index] = [];\n            }\n            if( neuron['bonds'].length > 0 ){\n                bonds[index] = new Array(n_total).fill(0);\n                neuron['bonds'].map((bond, _index)=>(\n                    bonds[index][parseInt(bond[0].toString())] = parseFloat(bond[1].toString()) / U32_MAX\n                ))\n            }\n            return true;\n        });\n\n        return {\n            identifiers, uids, active, stake, ranks, trust, emission, dividends, last_updates, endpoints: this.endpoint_objs, weights, bonds, incentive,\n        };\n    }\n\n    \n    /**\n     * Register callback for new block update\n     * @param {*} callback callback for new block update\n     */\n     async registerNewBlockCallback(callback) {\n        return await this.subtensor.registerNewBlockCallback(callback);\n    }\n};\n","\n// convert int to ip\nexport const int2ip = (ipInt) => {\n    return ( (ipInt>>>24) +'.' + ((ipInt>>>16) & 255) +'.' + ((ipInt>>>8) & 255) +'.' + (ipInt & 255) );\n}\n\n// convert ip to int\nexport const ip2int = (ip) => {\n    return ip.split('.').reduce(function(ipInt, octet) { return (ipInt<<8) + parseInt(octet, 10)}, 0) >>> 0;\n}\n\n","import { Observable } from 'rxjs';\nimport { cloneDeep } from 'lodash';\n\n/**\n * Rxjs Observable class for Bittensor network\n * @param {*} metagraph \n * @returns \n */\nfunction createMineServer(metagraph) {\n  function MineServer(metagraph) {\n    this.rowData = [];\n    this.metagraph = metagraph;\n    this.unsubscribeDatagridCallback = null;\n    this.unsubscribeChartCallback = null;\n    this.isDatagridUpdating = false;\n    this.isChartUpdating = false;\n  }\n\n  /**\n   * Returns Observable for bittensor network intial data\n   * @returns observable\n   */\n  MineServer.prototype.initialLoad = function () {\n    return Observable.fromPromise(\n      new Promise((resolve, reject) => {\n        //retrieve metagraph from server\n        console.log(process.env.REACT_APP_API_HOST);\n        fetch(process.env.REACT_APP_API_HOST)\n        .then(res => res.json())\n        .then((ret)=>{\n          console.log(ret);\n          this.rowData = ret || [];\n          resolve(cloneDeep(this.rowData));\n        },\n        (error) => {\n          console.log(error);\n        });\n      })\n    );\n  };\n\n  /**\n   * Register Bittensor New Block Callback for Datagrid data feed\n   * @returns \n   */\n  MineServer.prototype.updateNewBlockDatagrid = function () {\n    var that = Object(this);\n    return Observable.create(function (observer) {\n      //update datagrid\n      console.log('updateNewBlockDatagrid');\n      setInterval(()=>{\n        fetch(process.env.REACT_APP_API_HOST)\n        .then(res => res.json())\n        .then((ret)=>{\n          var newData = ret || [];\n          var updates = [];\n          var adds = [];\n          var deletes = [];\n          newData.map((data)=>{\n            if(that.rowData.some((org)=>(org.last_updates === data.last_updates ))){\n            }else {\n              if(that.rowData.some((org)=>(org.uid === data.uid ))){\n                //new data\n                updates.push(data);\n              } else {\n                adds.push(data);\n              }\n  \n            }\n            return true;\n          });\n\n          that.rowData.map((data)=>{\n            if(!newData.some((new_item)=>(new_item.uid === data.uid))){\n              deletes.push(data);\n            }\n            return true;\n          })\n          that.rowData = newData;\n          that.isDatagridUpdating = false;\n          observer.next({add: adds,update: updates, delete: deletes});\n        },\n        (error) => {\n          console.log(error);\n        });\n      }, process.env.REACT_APP_METAGRAPH_INTERVAL);\n     \n\n      // dispose datagrid new block callback\n      return function (){\n        if(that.unsubscribeDatagridCallback)\n          that.unsubscribeDatagridCallback();\n      }\n    });\n  }\n\n  /**\n   * Register Bittensor New Block callback for chart\n   * @returns \n   */\n  MineServer.prototype.updateNewBlockChart = function () {\n    var that = Object(this);\n    return Observable.create(function (observer) {\n      //update chart\n      that.metagraph.registerNewBlockCallback(function (block){\n        that.metagraph.subtensor.get_n().then((n_total)=>{\n          observer.next({n_total: n_total, block:block});\n        });\n      }).then((unsubscribe => that.unsubscribeChartCallback = unsubscribe));\n      return function (){\n        if(that.unsubscribeChartCallback)\n          that.unsubscribeChartCallback();\n      }\n    });\n  }\n\n  /**\n   * Convert Bittensor metadata to datagrid format\n   * @param {*} metadata \n   * @returns \n   */\n   MineServer.prototype.backfillData = function (metadata) {\n    //data conversion\n    let rowData = [];\n    metadata.uids.forEach((element, index) => {\n      rowData.push(\n        {\n          //uid: metadata.uids[index],\n          //ip: metadata.endpoints[index].ip,\n          uid: metadata.identifiers[index],\n          stake: metadata.stake[index],\n          rank: metadata.ranks[index],\n          trust: metadata.trust[index],\n          incentive: metadata.incentive[index],\n          dividend: metadata.dividends[index],\n          emission: metadata.emission[index],\n          last_updates: metadata.last_updates[index],\n        }\n      );\n    });   \n    return rowData;\n  };\n  return new MineServer(metagraph);\n}\nexport default createMineServer;\n","import React, { useState } from 'react';\nimport Highcharts from \"highcharts/highstock\";\n\nimport HighchartsReact from 'highcharts-react-official';\nimport styles from './styles.module.scss';\nimport PropTypes from 'prop-types';\n\n\n/**\n * Bittensor Chart Component for Neurons\n * @param {*} props \n * @returns \n */\nconst MinerChart = (props) =>{\n\n    const {\n        // Chart points series\n        series = [],\n        // Chart ref\n        setChartRef =()=>{},\n    } = props || {};\n\n    const [allowChartUpdate] = useState(true);\n    const [chartOptions] = useState({\n        title: {\n            text: \"Real-time Graph of the Network\"\n        },\n        chart: {\n            type: 'area',\n            renderTo: 'container',\n            zoomType: 'x',\n            events: {\n                load: e => {\n                    setChartRef(e.target);\n                }\n              }\n        },\n        xAxis: {\n            title:{\n                text: 'Blocks'\n            },\n            type: 'number',\n            alignTicks: false,\n            tickInterval: 1,\n            showLastLabel: true,\n            endOnTick: true,\n            labels: {\n            formatter: function () {\n                return this.value;\n                }\n            }\n        },\n        yAxis: {\n            title: {\n                text: 'Neurons'\n            },\n        },\n\n        // Chart zoom navigator\n        \"navigator\": {\n            xAxis: {\n                labels: {\n                    enabled: false\n                }\n            }\n        },\n\n        // Chart zoom config\n        rangeSelector: {\n            buttons: [\n            {\n                count: 10,\n                type: 'number',\n                text: '10'\n            }, \n            {\n                count: 50,\n                type: 'number',\n                text: '50'\n            }, \n            {\n                type: 'all',\n                text: 'All'\n            }],\n            inputEnabled: false,\n            selected: 0\n        },\n        series: series,\n\n        // Chart legend\n        legend: {\n            layout: 'vertical',\n            align: 'left',\n            x: 80,\n            verticalAlign: 'top',\n            y: 55,\n            floating: true,\n            backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'\n        },\n\n        // Chart Tooltip\n        tooltip: {\n            formatter() {\n               // eslint-disable-next-line react/no-this-in-sfc\n               return `<b>neurons: ${this.y} </b><br/><b>block number: ${this.x}</b>`;\n            },\n         },\n\n        credits: {\n            enabled: false\n        }\n    });\n\n    return (\n        <div className={styles.container}>\n            <HighchartsReact\n                //ref={ref}\n                constructorType={\"stockChart\"}\n                allowChartUpdate={allowChartUpdate}\n                highcharts={Highcharts}\n                options={chartOptions}\n            />\n        </div> \n    );\n};\n\nMinerChart.propTypes = {\n    seris: PropTypes.array,\n    setChartRef: PropTypes.func,\n};\n\n\nexport default MinerChart;","\nimport { AgGridReact, AgGridColumn } from '@ag-grid-community/react';\nimport {AllCommunityModules} from \"@ag-grid-community/all-modules\";\nimport styles from './styles.module.scss';\nimport PropTypes from 'prop-types';\n\n\n/**\n * Bittensor Datagraph Network Monitor component\n * @param {*} props \n * @returns \n */\nconst Datagrid = (props) =>{\n\n    const {\n        //datagrid column options\n        colOptions = [],\n        //datagrid intialization\n        onGridReady = ()=>{},\n        //datagrid row id\n        getRowNodeId = ()=>{},\n\n        rowBuffer= 20,\n        paginationPageSize= 100,\n        cacheOverflowSize= 2,\n        maxConcurrentDatasourceRequests= 1,\n        maxBlocksInCache= 10,\n        infiniteInitialRowCount= 100\n    } = props || {};\n\n    return (\n        <div\n            id=\"leaderboard\"\n            style={{\n            height: '100%',\n            width: '100%',\n            margin: '0 0'\n            }}\n            className=\"ag-theme-alpine\"\n        >\n            <AgGridReact\n            className={styles.gridContainer}\n                defaultColDef={{\n                    flex: 1,\n                    minWidth: 100,\n                    resizable: true,\n                    sortable: true,\n\n                }}\n                enableRangeSelection={true}\n                getRowNodeId={getRowNodeId}\n                modules={AllCommunityModules}\n                onGridReady={onGridReady}\n                rowBuffer={rowBuffer}\n                paginationPageSize={paginationPageSize}\n                cacheOverflowSize={cacheOverflowSize}\n                maxConcurrentDatasourceRequests={maxConcurrentDatasourceRequests}\n                infiniteInitialRowCount={infiniteInitialRowCount}\n                maxBlocksInCache={maxBlocksInCache}\n                >\n                {\n                    colOptions.map((option, index)=>(\n                        <AgGridColumn key={index} {...option}/>\n                    ))\n                }\n            </AgGridReact>\n        </div>\n    );\n}\n\nDatagrid.propTypes = {\n    colOptions: PropTypes.array,\n    onGridReady: PropTypes.func,\n    getRowNodeId: PropTypes.func,\n};\n\n\nexport default Datagrid;","\nexport const columnOptions = [\n    {\n      headerName: 'UID',\n      field: 'uid',\n      cellClass: 'cell-number',\n      maxWidth: 200,\n    },\n    {\n      headerName: 'STAKE',\n      field: 'stake',\n      cellClass: 'cell-number',\n    },\n    {\n      headerName: 'RANK',\n      field: \"rank\",\n      cellClass: \"cell-number\",\n    },\n    {\n      headerName: 'TRUST',\n      field: \"trust\",\n      cellClass: \"cell-number\",\n    },\n    {\n      headerName: 'INCENTIVE',\n      field: \"incentive\",\n      cellClass: \"cell-number\",\n    },\n    {\n      headerName: 'DIVIDENDS',\n      field: \"dividend\",\n      cellClass: \"cell-number\",\n    },\n    {\n      headerName: 'EMISSIONS',\n      field: \"emission\",\n      cellClass: \"cell-number\",\n    },\n    /*\n    {\n      headerName: 'LAST UPDATE',\n      field: \"last_update\",\n      cellClass: \"cell-number\",\n    },\n    */\n];\n","\nimport {useEffect, useState } from 'react';\nimport Header from '../../components/header';\nimport styles from './styles.module.scss';\nimport Subtensor from '../../tensor/subtensor';\nimport Metagraph  from '../../tensor/metagraph';\nimport createMineServer from '../../functions/mineserver';\nimport MinerChart from '../../components/chart';\nimport Datagrid from '../../components/datagrid';\n\nimport {columnOptions} from '../../configs';\n\n\n\nconst Leaderboard = () =>{\n  const [subtensor, setSubtensor] = useState(null);\n  const [metagraph, setMetagraph] = useState(null);\n  // datagrid api state var\n  const [gridApi, setGridApi] = useState(null);\n  // datagrid column api state var \n  const [, setGridColumnApi] = useState(null);\n  // chart ref\n  const [chartRef, setChartRef] = useState(null);\n\n\n  /**\n   * Subtensor Connection and Metagraph initialization\n   */\n  const connectToTensor = async ()=>{\n      const _subtensor = new Subtensor(\"\", process.env.REACT_APP_SUBSTRATE);\n      await _subtensor.connect();\n      const _metagraph = new Metagraph(_subtensor);\n      setSubtensor(_subtensor);\n      setMetagraph(_metagraph);\n  }\n\n  const getRowNodeId = (data) => {\n      return data.uid;\n  }\n\n  const onGridReady = async (params) => {\n      setGridApi(params.api);\n      setGridColumnApi(params.columnApi);\n  };\n  /**\n   * minerserver creation and register rx observables,\n   */\n  useEffect(()=>{\n    if(metagraph && gridApi){\n      var mockServer =  createMineServer(metagraph),\n        // datagrid init data\n        initialLoad$ = mockServer.initialLoad(),\n        // datagrid update data\n        updateNewBlockDatagrid$ = mockServer.updateNewBlockDatagrid(),\n        // chart update data\n        updateNewBlockChart$ = mockServer.updateNewBlockChart();\n        updateNewBlockChart$.subscribe(function ({n_total, block}){\n          updateMetadata(n_total, block);\n        });\n    \n        initialLoad$.subscribe(function (rowData) {\n          if(gridApi != null)\n            gridApi.setRowData(rowData);\n            updateNewBlockDatagrid$.subscribe(function (updates){\n            if(gridApi != null) {\n              console.log(updates);\n              gridApi.applyTransactionAsync(updates);\n            }\n          });\n        });\n\n    }\n  }, [metagraph, gridApi]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(()=>{\n      connectToTensor();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const updateMetadata = async (n_total, block)=>{\n    console.log(n_total);\n    if(subtensor && chartRef){\n        chartRef.series.forEach(function(s) {\n          const len = s.points.length;\n          const time = (new Date()).getTime();\n          if(s.points[len - 1].y !== parseInt(n_total)){\n            s.addPoint({\n              x: parseInt(block.number.toString()), \n              y:parseInt(n_total), \n              xLabel: block.number.toString(), \n              time: time}, false, false);\n            chartRef.redraw(false);\n          }\n        }\n      );\n    }\n  }\n\n\n\n  function getDataSeries() {\n    var series = [];\n  \n    series.push({\n        name: 'neurons number:',\n    data: getRandomData()\n    });\n  \n    return series;\n  }\n    \n  function getRandomData() {\n    var data = [];\n  \n    for (var i = 0; i < 10; i++) {\n      data.push({x: i, y: 0, xLabel: \"\", time: new Date()});\n    }\n  \n    return data;\n  }\n\n\n  return (\n      <>\n      <div className={styles.contents}>\n      <Header />\n        <div className={styles.datagrid}>\n          <Datagrid \n                colOptions={columnOptions}\n                onGridReady={onGridReady}\n                getRowNodeId={getRowNodeId}\n            />\n        </div>\n        <div className={styles.chart}>\n            <MinerChart \n                series={getDataSeries()} \n                setChartRef={setChartRef}\n                />\n        </div>\n      </div>\n      </>\n  );\n}\n\nexport default Leaderboard;","import React from \"react\"\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\nimport './App.css';\nimport Leaderboard from './pages/leaderboard';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Leaderboard}>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport \"@ag-grid-community/all-modules/dist/styles/ag-grid.css\";\nimport \"@ag-grid-community/all-modules/dist/styles/ag-theme-alpine.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n  \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}